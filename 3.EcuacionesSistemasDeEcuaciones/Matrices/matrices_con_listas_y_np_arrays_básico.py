# -*- coding: utf-8 -*-
"""Matrices con Listas y np.arrays_básico.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mdditU85fhT-Jz5be0ihKl5U0Exc4LOs

# Matrices
## Implementada como listas de listas, con numpy.array y el resultado de aplicarles los operadores + y *

Referencias:

[Numpy array rutinas](https://numpy.org/doc/stable/reference/routines.array-creation.html)


---
Roberto Méndez Méndez

Editado: Jun 27

## Matrices modeladas con Listas

### Operación + con  matrices como lista
"""

M1 = [[1,2,3], [3,2,1]]
M2 = [[4,5,6], [6,5,4]]

Msuma= M1 + M2
print(Msuma)

"""### Se podrá el producto con *?"""

M1 = [[1,2,3], [3,2,1]]
M2 = [[4,5,6], [6,5,4]]

Mproducto= M1 * M2
print(Mproducto)

"""### Suma de Matrices como Listas

Suma de posiciones independientes
"""

M1 = [[1,2,3], [4,5,6]]
M2 = [[-1,7,8], [-3,5.5,0]]

for n in range(len(M1)):
    for m in range(len(M2[0])):
        print("En la posición: ",n,m)
        print("La suma es: ", M1[n][m] + M2[n][m])

"""Suma que se almacena en una Lista"""

M1 = [[1,2,3], [4,5,6]]
M2 = [[-1,7,8], [-3,5.5,0]]

Msum =[]
for n in range(len(M1)):
    Msum.append([])
    for m in range(len(M2[0])):
        Msum[n].append(M1[n][m] + M2[n][m])
print(Msum)

"""### Producto de Matrices como Listas usando ciclos"""

M1 = [[1,2,3], [5.5,12,1]]
M2 = [[4,5,6,3], [6,5,4,3], [3,5,7,3]]

Mprod =[]
for n in range(len(M1)):
    Mprod.append([])
    for m in range(len(M2[0])):
        tmp = 0
        i = 0
        while i < len(M1[0]):
            tmp += M1[n][i]*M2[i][m]
            i += 1
        Mprod[n].append(tmp)
print(Mprod)

"""## Matrices modeladas con numpy.array

La operación + en  matrices con numpy da justamente la suma de matrices
"""

import numpy as np
M1 = np.array([[1,2,3], [5.5,12,1]])
M2 = np.array([[4,5,6], [6,5,4]])

Msuma = M1 + M2
print(Msuma)

"""Implementación de la suma de matrices (numpy) con ciclos"""

import numpy as np
M1n = np.array([[1,2,3], [5.5,12,1]])
M2n = np.array([[4,5,6], [6,5,4]])

Msum =np.zeros((len(M1n), M1n[0].size))

for i in range(len(M1n)):
    for j in range(len(M2n[0])):
        Msum[i][j] = M1n[i][j] + M2n[i][j]
print(Msum)

"""La operación * en  matrices con numpy, regresa el producto de los valores en la misma posición."""

import numpy as np
M1 = np.array([[1,2,3], [3,2,1]])
M2 = np.array([[4,5,6], [6,5,4]])

Mproducto  = M1 * M2
print(Mproducto)

"""### Producto de Matrices con numpy usando ciclos"""

import numpy as np

M1n = np.array([[1,2,3], [5.5,12,1]])
M2n = np.array([[4,5,6,3], [6,5,4,3], [3,5,7,3]])

Mprod =np.zeros((len(M1n), M2n[0].size))

# Forma aritmética

for i in range(len(M1n)):
    for j in range(len(M2n[0])):
        tmp = 0
        for k in range(len(M2n)):
            tmp += M1n[i][k]*M2n[k][j]
        Mprod[i][j] = tmp
print("La matriz producto es: \n ", Mprod)


# Forma usando *, sum() submatriz con M2n[:,j]
for i in range(len(M1n)):
    for j in range(len(M2n[0])):
        Mprod[i][j] = np.sum(M1n[i]*M2n[:,j])
print("La matriz producto es: \n ", Mprod)

"""### Algunas funciones muy básicas en numpy para matrices"""

m1s = np.ones((2,3))
print(m1s)

m0s = np.zeros((2,3))
print(m0s)

print(m1s.size)
print(len(M1n))

mVacia = np.empty([1,3])
print(mVacia)

mVacia = np.empty([3,4])
print(mVacia)